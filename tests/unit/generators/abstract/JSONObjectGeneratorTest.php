<?php
require_once __DIR__ . DIRECTORY_SEPARATOR . ".." . DIRECTORY_SEPARATOR . ".." . DIRECTORY_SEPARATOR . "baseTest.php";
require_once AMPHIBIAN_GENERATORS_ABSTRACT."JSONObjectGenerator.php";
/**
 * Class JSONObjectGeneratorTest
 *
 * @category 
 * @package  
 * @author   
 * @license  
 * @link     documentation/JSONObjectGeneratorTest
 *
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-04-06 at 21:09:59.
 *
 */
class JSONObjectGeneratorTest 
    extends BaseTest
{
    /** setUp
     *
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        $this->object = $this->getMockForAbstractClass('JSONObjectGenerator');
    }

    /** testSetRequestOrResponse
     *
     * @param string $value          either "request" or "response"
     * @param bool   $expectedResult true = success, false = failure
     *
     * @covers JSONObjectGenerator::setRequestOrResponse
     *
     * @return void
     */
    public function testSetRequestOrResponse($value, $expectedResult)
    {
        $this->expected = $expectedResult;
        $this->actual = $this->object->setRequestOrResponse($value);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testGetRequestOrResponse
     *
     * @param string $expectedResult either "request" or "response"
     *
     * @covers JSONObjectGenerator::getRequestOrResponse
     *
     * @return void
     */
    public function testGetRequestOrResponse($expectedResult)
    {
        $this->expected = $expectedResult;
        $this->actual = $this->object->getRequestOrResponse();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testSetAgencyOrModel
     *
     * @param string $value          "agency" or "model"
     * @param bool   $expectedResult true = success, false = failure
     *
     * @covers JSONObjectGenerator::setAgencyOrModel
     *
     * @return void
     */
    public function testSetAgencyOrModel($value, $expectedResult)
    {
        $this->expected = $expectedResult;
        $this->actual = $this->object->setAgencyOrModel($value);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testGetAgencyOrModel
     *
     * @param string $expectedResult either "agency" or "model"
     *
     * @covers JSONObjectGenerator::getAgencyOrModel
     *
     * @return void
     */
    public function testGetAgencyOrModel($expectedResult)
    {
        $this->expected = $expectedResult;
        $this->actual = $this->object->getAgencyOrModel();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testSetTypes
     *
     * @param array $value          the types to use
     * @param bool  $expectedResult true = success, false = failure
     *
     * @covers JSONObjectGenerator::setTypes
     *
     * @return void
     */
    public function testSetTypes($value, $expectedResult)
    {
        $this->expected = $expectedResult;
        $this->actual = $this->object->setTypes($value);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testGetTypes
     *
     * @param array $expectedResult the expected types
     *
     * @covers JSONObjectGenerator::getTypes
     *
     * @return void
     */
    public function testGetTypes($expectedResult)
    {
        $this->expected = $expectedResult;
        $this->actual = $this->object->getTypes();
        $this->assertEquals($this->expected, $this->actual);
    }
}
