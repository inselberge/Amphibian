<?php
require_once __DIR__ . DIRECTORY_SEPARATOR . ".." . DIRECTORY_SEPARATOR . ".." . DIRECTORY_SEPARATOR . "baseTest.php";
require_once AMPHIBIAN_GENERATORS_NEUTRAL."architectureGenerator.php";
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-06-07 at 17:49:30.
 */
class ArchitectureGeneratorTest
    extends BaseTest
{
    /** setUp
     *
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        $this->object = new ArchitectureGenerator(".");
    }

    /** testSetDirectoryName
     *
     * @covers ArchitectureGenerator::setDirectoryName
     *
     * @return void
     */
    public function testSetDirectoryName($name, $expectedResult)
    {
        $this->expected = $expectedResult;
        $this->actual = $this->object->setDirectoryName($name);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** directoryNameDataProvider
     *
     * @return array
     */
    public function directoryNameDataProvider()
    {
        return array(
            array("", true),
            array("", true),
            array("", true)
        );
    }


    /** testSetDirectoryList
     *
     * @covers ArchitectureGenerator::setDirectoryList
     *
     * @dataProvider directoryListDataProvider
     *
     * @return void
     */
    public function testSetDirectoryList($list, $expectedResult)
    {
        $this->expected = $expectedResult;
        $this->actual = $this->object->setDirectoryList($list);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** directoryListDataProvider
     *
     * @return array
     */
    public function directoryListDataProvider()
    {
        return array(
            array(array(), true),
            array(array(), true),
            array(array(), true)
        );
    }

    /** testExecute
     *
     * @covers ArchitectureGenerator::execute
     *
     * @return void
     */
    public function testExecute()
    {
        $this->expected = true;
        $this->actual = $this->object->execute();
        $this->assertEquals($this->expected, $this->actual);
    }
}
