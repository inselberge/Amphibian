<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-06-07 at 17:49:24.
 */
require_once __DIR__ . DIRECTORY_SEPARATOR . ".." . DIRECTORY_SEPARATOR . ".." . DIRECTORY_SEPARATOR . "baseTest.php";
require_once AMPHIBIAN_GENERATORS_MYSQLI."sprocGeneratorMySQLi.php";
/**
 * Class sprocGeneratorMySQLiTest
 *
 * @category ${NAMESPACE}
 * @package  sprocGeneratorMySQLiTest
 * @author   Carl 'Tex' Morgan <texmorgan@inselberge.com>
 * @license
 * @link
 */
class SprocGeneratorMySQLiTest
    extends BaseTest
{
    /** setUp
     *
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        $this->object = SprocGeneratorMySQLi::factory($this->connection);
    }

    /** testInstance
     *
     * @covers sprocGeneratorMySQLi::instance
     *
     * @return void
     */
    public function testInstance()
    {
        $this->expected = $this->object;
        $this->actual = SprocGeneratorMySQLi::instance($this->connection);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testFactory
     *
     * @covers SprocGeneratorMySQLi::factory
     *
     * @return void
     */
    public function testFactory()
    {
        $this->expected = $this->object;
        $this->actual = SprocGeneratorMySQLi::factory($this->connection);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testSetTableNames
     *
     * @param array $tableNames     an array of table names to use
     * @param bool  $expectedResult the expected outcome of the function call
     *
     * @covers sprocGeneratorMySQLi::setTableNames
     *
     * @return void
     */
    public function testSetTableNames($tableNames, $expectedResult)
    {
        $this->expected = $expectedResult;
        $this->actual = $this->object->setTableNames($tableNames);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testExecute
     *
     * @covers sprocGeneratorMySQLi::execute
     *
     * @return void
     */
    public function testExecute()
    {
        $this->expected = true;
        $this->actual = $this->object->execute();
        $this->assertEquals($this->expected, $this->actual);
    }
}
