<?php

require_once __DIR__ . DIRECTORY_SEPARATOR . ".." . DIRECTORY_SEPARATOR . ".." . DIRECTORY_SEPARATOR . "baseTest.php";

require_once AMPHIBIAN_GENERATORS_MYSQLI."agencyGeneratorMySQLi.php";


/**
 * Class agencyGeneratorMySQLiTest
 *
 * @category UnitTest
 * @package  AgencyGeneratorMySQLi
 * @author   Carl "Tex" Morgan <texmorgan@amphibian.co>
 * @license  GPL v3
 * @link     documentation/agencyGeneratorMySQLiTest
 *
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-04-06 at 21:21:19.
 *
 */
class AgencyGeneratorMySQLiTest
    extends BaseTest
{
    /** setUp
     *
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        $SSL = databaseConnectionMySQLi::instance();
        $SSL->setOptions(MYSQLI_OPT_CONNECT_TIMEOUT, 10);
        $SSL->setOptions(MYSQLI_SERVER_PUBLIC_KEY, "/etc/mysql/my.cnf");
        $SSL->setOptions(MYSQLI_OPT_SSL_VERIFY_SERVER_CERT, true);
        $SSL->setSSL(
            "/etc/mysql/client-key.pem",
            "/etc/mysql/client-cert.pem",
            "/etc/mysql/ca-cert.pem",
            "/etc/mysql/",
            'DHE-RSA-AES256-SHA'
        );
        $SSL->setServerName("127.0.0.1");
        $SSL->setDatabaseName("InnerAlly");
        $SSL->setUserName("root");
        $SSL->setUserPassword('4u$t1nTX');
        $SSL->openConnection();
        $this->connection = $SSL;
        $this->object = AgencyGeneratorMySQLi::instance($this->connection);
    }

    /** testInstance
     *
     * @covers AgencyGeneratorMySQLi::instance
     *
     * @return void
     */
    public function testInstance()
    {
        $this->expected = $this->object;
        $this->actual = AgencyGeneratorMySQLi::instance($this->connection);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testFactory
     *
     * @covers AgencyGeneratorMySQLi::factory
     *
     * @return void
     */
    public function testFactory()
    {
        $this->expected = $this->object;
        $this->actual = AgencyGeneratorMySQLi::factory($this->connection);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testExecute
     *
     * @covers AgencyGeneratorMySQLi::execute
     *
     * @return void
     */
    public function testExecute()
    {
        $this->expected = true;
        $this->actual = $this->object->execute();
        $this->assertEquals($this->expected, $this->actual);
    }
}
