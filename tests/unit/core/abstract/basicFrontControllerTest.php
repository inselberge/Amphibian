<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-08-23 at 22:51:32.
 */
require_once __DIR__ . DIRECTORY_SEPARATOR . ".." . DIRECTORY_SEPARATOR . ".." . DIRECTORY_SEPARATOR . "baseTest.php";
require_once AMPHIBIAN_CORE_ABSTRACT . "BasicFrontController.php";

/**
 * Class BasicFrontControllerTest
 *
 * @category Test
 * @package  BasicFrontController
 * @author   Carl 'Tex' Morgan <texmorgan@amphibian.co>
 * @license  All rights reserved by Inselberge Inc. unless otherwise stated.
 * @link     http://amphibian.co/${PROJECT_NAME}/documentation/BasicFrontControllerTest
 */
class BasicFrontControllerTest
    extends BaseTest
{
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = $this->getMockForAbstractClass('BasicFrontController',array("http://coworks.in/Geekdom/user/browse/limit/25/offset/50"));
        //$this->object = BasicFrontController::factory("http://coworks.in/Geekdom/user/browse/limit/25/offset/50");
    }

    /** testSetClassName
     *
     * @param string $value          the value to use
     * @param bool   $expectedResult true = success; false = failure
     *
     * @covers BasicFrontController::setClassName
     *
     * @dataProvider setClassNameDataProvider
     *
     * @return void
     */
    public function testSetClassName($value, $expectedResult)
    {
        $this->expected = $expectedResult;
        $this->actual = $this->object->setClassName($value);
        $this->assertEquals($this->expected, $this->actual);
    }

    public function setClassNameDataProvider()
    {
        return array(
            array("User", true),
            array("Login", true),
            array(null, false)
        );
    }
    /** testGetClassName
     *
     * @covers BasicFrontController::getClassName
     *
     * @return void
     */
    public function testGetClassName($expectedResult)
    {
        $this->expected = $expectedResult;
        $this->actual = $this->object->getClassName();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** deviceTypeDataProvider
     *
     * @return array
     */
    public function deviceTypeDataProvider()
    {
        return array(
            array()
        );
    }

    /** testSetDeviceType
     *
     * @param string $deviceType the type of device
     *
     * @covers BasicFrontController::setDeviceType
     *
     * @dataProvider deviceTypeDataProvider
     *
     * @return void
     */
    public function testSetDeviceType($deviceType, $expectedResult)
    {
        $this->expected = $expectedResult;
        $this->actual = $this->object->setDeviceType($deviceType);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testGetDeviceType
     *
     * @covers BasicFrontController::getDeviceType
     *
     * @return void
     */
    public function testGetDeviceType($expectedResult)
    {
        $this->expected = $expectedResult;
        $this->actual = $this->object->getDeviceType();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** renderMethodDataProvider
     *
     * @return array
     */
    public function renderMethodDataProvider()
    {
        return array(
            array()
        );
    }

    /** testSetRenderMethod
     *
     * @param string $renderMethod a valid render method
     *
     * @covers BasicFrontController::setRenderMethod
     *
     * @dataProvider renderMethodDataProvider
     *
     * @return void
     */
    public function testSetRenderMethod($renderMethod, $expectedResult)
    {
        $this->expected = $expectedResult;
        $this->actual = $this->object->setRenderMethod($renderMethod);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testGetRenderMethod
     *
     * @covers BasicFrontController::getRenderMethod
     *
     * @return void
     */
    public function testGetRenderMethod($expectedResult)
    {
        $this->expected =$expectedResult;
        $this->actual = $this->object->getRenderMethod();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** viewTypeDataProvider
     *
     * @return array
     */
    public function viewTypeDataProvider()
    {
        return array(
          array()
        );
    }

    /** testSetViewType
     *
     * @param string $viewType a valid view type
     *
     * @covers BasicFrontController::setViewType
     *
     * @dataProvider viewTypeDataProvider
     *
     * @return void
     */
    public function testSetViewType($viewType, $expectedResult)
    {
        $this->expected = $expectedResult;
        $this->actual = $this->object->setViewType($viewType);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testGetViewType
     *
     * @covers BasicFrontController::getViewType
     *
     * @return void
     */
    public function testGetViewType($expectedResult)
    {
        $this->expected = $expectedResult;
        $this->actual = $this->object->getViewType();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** controllerNameDataProvider
     *
     * @return array
     */
    public function controllerNameDataProvider()
    {
        return array(
            array()
        );
    }

    /** testSetControllerName
     *
     * @param string $controllerName a valid controller
     *
     * @covers BasicFrontController::setControllerName
     *
     * @dataProvider controllerNameDataProvider
     *
     * @return void
     */
    public function testSetControllerName($controllerName, $expectedResult)
    {
        $this->expected = $expectedResult;
        $this->actual = $this->object->setControllerName($controllerName);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** actionDataProvider
     *
     * @return array
     */
    public function actionDataProvider()
    {
        return array(
            array()
        );
    }

    /** testSetAction
     *
     * @param string $action a valid action
     *
     * @covers BasicFrontController::setAction
     *
     * @dataProvider actionDataProvider
     *
     * @return void
     */
    public function testSetAction($action, $expectedResult)
    {
        $this->expected = $expectedResult;
        $this->actual = $this->object->setAction($action);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** variableDataProvider
     *
     * @return array
     */
    public function variableDataProvider()
    {
        return array(
            array()
        );
    }

    /** testSetVariables
     *
     * @param mixed $variables the variables to set
     *
     * @covers BasicFrontController::setVariables
     *
     * @dataProvider variableDataProvider
     *
     * @return void
     */
    public function testSetVariables($variables, $expectedResult)
    {
        $this->expected = $expectedResult;
        $this->actual = $this->object->setVariables($variables);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** controllerDataProvider
     *
     * @return array
     */
    public function controllerDataProvider()
    {
        return array(
          array()
        );
    }

    /** testCascadeControllers
     *
     * @param array $controllers an array of locations to investigate
     *
     * @covers BasicFrontController::cascadeController
     *
     * @dataProvider controllerDataProvider
     *
     * @return void
     */
    public function testCascadeController($controllers, $expectedResult)
    {
        $this->expected = $expectedResult;
        $this->actual = $this->object->cascadeControllers($controllers);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** viewDataProvider
     *
     * @return array
     */
    public function viewDataProvider()
    {
        return array(
            array()
        );
    }

    /** testCascadeView
     *
     * @param array $locations an array of locations to investigate
     *
     * @covers BasicFrontController::cascadeView
     *
     * @dataProvider viewDataProvider
     *
     * @return void
     */
    public function testCascadeView($locations, $expectedResult)
    {
        $this->expected = $expectedResult;
        $this->actual = $this->object->cascadeView($locations);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testInitController
     *
     * @covers BasicFrontController::initController
     *
     * @dataProvider booleanDataProvider
     *
     * @return void
     */
    public function testInitController($expectedResult)
    {
        $this->expected = $expectedResult;
        $this->actual = $this->object->initController();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testExecute
     *
     * @covers BasicFrontController::execute
     *
     * @dataProvider booleanDataProvider
     *
     * @return void
     */
    public function testExecute($expectedResult)
    {
        $this->expected = $expectedResult;
        $this->actual = $this->object->execute();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testHandleAction
     *
     * @covers BasicFrontController::handleAction
     *
     * @dataProvider booleanDataProvider
     *
     * @return void
     */
    public function testHandleAction($expectedResult)
    {
        $this->expected = $expectedResult;
        $this->actual = $this->object->handleAction();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testSendErrors
     *
     * @covers BasicFrontController::sendErrors
     *
     * @dataProvider booleanDataProvider
     *
     * @return void
     */
    public function testSendErrors($expectedResult)
    {
        $this->expected = $expectedResult;
        $this->actual = $this->object->sendErrors();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testCheckMalicious
     *
     * @covers BasicFrontController::checkMalicious
     *
     * @dataProvider booleanDataProvider
     *
     * @return void
     */
    public function testCheckMalicious($expectedResult)
    {
        $this->expected = $expectedResult;
        $this->actual = $this->object->checkMalicious();
        $this->assertEquals($this->expected, $this->actual);
    }

}