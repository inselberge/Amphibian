<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-08-23 at 22:51:32.
 */
require_once __DIR__ . DIRECTORY_SEPARATOR."..".DIRECTORY_SEPARATOR."..".DIRECTORY_SEPARATOR."..".DIRECTORY_SEPARATOR."config".DIRECTORY_SEPARATOR."config.inc.php";
require_once AMPHIBIAN_CORE . "BasicFrontControllerMySQLi.php";
require_once __DIR__.DIRECTORY_SEPARATOR."..".DIRECTORY_SEPARATOR."baseTest.php";
/**
 * Class BasicFrontControllerMySQLiTest
 *
 * @category Test
 * @package  BasicFrontControllerMySQLi
 * @author   Carl 'Tex' Morgan <texmorgan@amphibian.co>
 * @license  All rights reserved by Inselberge Inc. unless otherwise stated.
 * @link     http://amphibian.co/${PROJECT_NAME}/documentation/BasicFrontControllerMySQLiTest
 */
class BasicFrontControllerMySQLiTest
    extends BaseTest
{
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = BasicFrontControllerMySQLi::instance("http://coworks.in/Geekdom/user/browse/limit/25/offset/50");
    }

    /** testInstance
     *
     * @covers BasicFrontControllerMySQLi::instance
     *
     * @return void
     */
    public function testInstance()
    {
        $this->expected = $this->object;
        $this->actual = BasicFrontControllerMySQLi::instance("http://coworks.in/Geekdom/user/browse/limit/25/offset/50");
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testSetClassName
     *
     * @covers BasicFrontControllerMySQLi::setClassName
     *
     * @return void
     */
    public function testSetClassName()
    {
        $this->expected = true;
        $this->actual = $this->object->setClassName("User");
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testGetClassName
     *
     * @covers BasicFrontControllerMySQLi::getClassName
     *
     * @return void
     */
    public function testGetClassName()
    {
        $this->expected = "User";
        $this->actual = $this->object->getClassName();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** deviceTypeDataProvider
     *
     * @return array
     */
    public function deviceTypeDataProvider()
    {
        return array(
            array()
        );
    }

    /** testSetDeviceType
     *
     * @param string $deviceType the type of device
     *
     * @covers BasicFrontControllerMySQLi::setDeviceType
     *
     * @dataProvider deviceTypeDataProvider
     *
     * @return void
     */
    public function testSetDeviceType($deviceType)
    {
        $this->expected = true;
        $this->actual = $this->object->setDeviceType($deviceType);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testGetDeviceType
     *
     * @covers BasicFrontControllerMySQLi::getDeviceType
     *
     * @return void
     */
    public function testGetDeviceType()
    {
        $this->expected = "Desktop";
        $this->actual = $this->object->getDeviceType();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** renderMethodDataProvider
     *
     * @return array
     */
    public function renderMethodDataProvider()
    {
        return array(
            array()
        );
    }

    /** testSetRenderMethod
     *
     * @param string $renderMethod a valid render method
     *
     * @covers BasicFrontControllerMySQLi::setRenderMethod
     *
     * @dataProvider renderMethodDataProvider
     *
     * @return void
     */
    public function testSetRenderMethod($renderMethod)
    {
        $this->expected = true;
        $this->actual = $this->object->setRenderMethod($renderMethod);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testGetRenderMethod
     *
     * @covers BasicFrontControllerMySQLi::getRenderMethod
     *
     * @return void
     */
    public function testGetRenderMethod()
    {
        $this->expected ="Desktop";
        $this->actual = $this->object->getRenderMethod();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** viewTypeDataProvider
     *
     * @return array
     */
    public function viewTypeDataProvider()
    {
        return array(
          array()
        );
    }

    /** testSetViewType
     *
     * @param string $viewType a valid view type
     *
     * @covers BasicFrontControllerMySQLi::setViewType
     *
     * @dataProvider viewTypeDataProvider
     *
     * @return void
     */
    public function testSetViewType($viewType)
    {
        $this->expected = true;
        $this->actual = $this->object->setViewType($viewType);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testGetViewType
     *
     * @covers BasicFrontControllerMySQLi::getViewType
     *
     * @return void
     */
    public function testGetViewType()
    {
        $this->expected = "desktop";
        $this->actual = $this->object->getViewType();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** controllerNameDataProvider
     *
     * @return array
     */
    public function controllerNameDataProvider()
    {
        return array(
            array()
        );
    }

    /** testSetControllerName
     *
     * @param string $controllerName a valid controller
     *
     * @covers BasicFrontControllerMySQLi::setControllerName
     *
     * @dataProvider controllerNameDataProvider
     *
     * @return void
     */
    public function testSetControllerName($controllerName)
    {
        $this->expected = true;
        $this->actual = $this->object->setControllerName($controllerName);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** actionDataProvider
     * @return array
     */
    public function actionDataProvider()
    {
        return array(
            array()
        );
    }

    /** testSetAction
     *
     * @param string $action a valid action
     *
     * @covers BasicFrontControllerMySQLi::setAction
     *
     * @dataProvider actionDataProvider
     *
     * @return void
     */
    public function testSetAction($action)
    {
        $this->expected = true;
        $this->actual = $this->object->setAction($action);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** variableDataProvider
     *
     * @return array
     */
    public function variableDataProvider()
    {
        return array(
            array()
        );
    }

    /** testSetVariables
     *
     * @param mixed $variables the variables to set
     *
     * @covers BasicFrontControllerMySQLi::setVariables
     *
     * @dataProvider variableDataProvider
     *
     * @return void
     */
    public function testSetVariables($variables)
    {
        $this->expected = true;
        $this->actual = $this->object->setVariables($variables);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** controllerDataProvider
     *
     * @return array
     */
    public function controllerDataProvider()
    {
        return array(
          array()
        );
    }

    /** testCascadeControllers
     *
     * @param array $controllers an array of locations to investigate
     *
     * @covers BasicFrontControllerMySQLi::cascadeController
     *
     * @dataProvider controllerDataProvider
     *
     * @return void
     */
    public function testCascadeController($controllers)
    {
        $this->expected = true;
        $this->actual = $this->object->cascadeControllers($controllers);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** viewDataProvider
     *
     * @return array
     */
    public function viewDataProvider()
    {
        return array(
            array()
        );
    }

    /** testCascadeView
     *
     * @param array $locations an array of locations to investigate
     *
     * @covers BasicFrontControllerMySQLi::cascadeView
     *
     * @dataProvider viewDataProvider
     *
     * @return void
     */
    public function testCascadeView($locations)
    {
        $this->expected = true;
        $this->actual = $this->object->cascadeView($locations);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testInitController
     *
     * @covers BasicFrontControllerMySQLi::initController
     *
     * @return void
     */
    public function testInitController()
    {
        $this->expected = true;
        $this->actual = $this->object->initController();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testExecute
     *
     * @covers BasicFrontControllerMySQLi::execute
     *
     * @return void
     */
    public function testExecute()
    {
        $this->expected = true;
        $this->actual = $this->object->execute();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testHandleAction
     *
     * @covers BasicFrontControllerMySQLi::handleAction
     *
     * @return void
     */
    public function testHandleAction()
    {
        $this->expected = null;
        $this->actual = $this->object->handleAction();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testSendErrors
     *
     * @covers BasicFrontControllerMySQLi::sendErrors
     *
     * @return void
     */
    public function testSendErrors()
    {
        $this->expected = null;
        $this->actual = $this->object->sendErrors();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testCheckMalicious
     *
     * @covers BasicFrontControllerMySQLi::checkMalicious
     *
     * @return void
     */
    public function testCheckMalicious()
    {
        $this->expected = null;
        $this->actual = $this->object->checkMalicious();
        $this->assertEquals($this->expected, $this->actual);
    }
}
