<?php
/**
 * PHP version 5.4.17
 *
 * Created by JetBrains PhpStorm.
 * User: Carl "Tex" Morgan <texmorgan@amphibian.co>
 * Date: 10/24/13
 * Time: 12:38 PM
 *
 * All rights reserved by Inselberge Inc. unless otherwise stated
 */
require_once __DIR__ . DIRECTORY_SEPARATOR."..".DIRECTORY_SEPARATOR."../../config/config.inc.php";
require_once AMPHIBIAN_CORE."cURL.php";
require_once __DIR__."/../baseTest.php";
/**
 * Class cURLTest
 *
 * @category Helper
 * @package  cURL
 * @author   Carl "Tex" Morgan <texmorgan@amphibian.co>
 * @license  All rights reserved by Inselberge Inc. unless otherwise stated.
 * @link     http://amphibian.co/documentation/cURLTest
 *
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-09-17 at 13:41:29.
 *
 */
class cURLTest 
	extends BaseTest
{
    /** setUp
     *
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        $this->object = cURL::instance();
    }

    /** testInstance
     *
     * @covers cURL::instance
     *
     * @return void
     */
    public function testInstance()
    {
        $this->expected = $this->object;
        $this->actual = cURL::instance();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testInit
     *
     * @covers cURL::init
     *
     * @return void
     */
    public function testInit()
    {
        $this->expected = true;
        $this->actual = $this->object->init();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** optionsDataProvider
     *
     * @return array
     */
    public function optionsDataProvider()
    {
        return array();
    }

    /** testSetDefaultOptions
     *
     * @param mixed $options the options to use for the cURL call
     *
     * @covers cURL::setDefaultOptions
     *
     * @dataProvider optionsDataProvider
     *
     * @return void
     */
    public function testSetDefaultOptions($options)
    {
        $this->expected = true;
        $this->actual = $this->object->setDefaultOptions($options);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testGetDefaultOptions
     *
     * @covers cURL::getDefaultOptions
     *
     * @return void
     */
    public function testGetDefaultOptions()
    {
        $this->expected = array();
        $this->actual = $this->object->getDefaultOptions();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testSetOptions
     *
     * @param mixed $options the options to set
     *
     * @covers cURL::setOptions
     *
     * @dataProvider optionsDataProvider
     *
     * @return void
     */
    public function testSetOptions($options)
    {
        $this->expected = true;
        $this->actual = $this->object->setOptions($options);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testGetOptions
     *
     * @covers cURL::getOptions
     *
     * @return void
     */
    public function testGetOptions()
    {
        $this->expected = array();
        $this->actual = $this->object->getOptions();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** urlDataProvider
     *
     * @return array
     */
    public function urlDataProvider()
    {
        return array();
    }

    /** testSetUrl
     *
     * @param string $url a valid URL
     *
     * @covers cURL::setUrl
     *
     * @dataProvider urlDataProvider
     *
     * @return void
     */
    public function testSetUrl($url)
    {
        $this->expected = true;
        $this->actual = $this->object->setUrl($url);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testGetUrl
     *
     * @covers cURL::getUrl
     *
     * @return void
     */
    public function testGetUrl()
    {
        $this->expected = true;
        $this->actual = $this->object->getUrl();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** valuesDataProvider
     *
     * @return array
     */
    public function valuesDataProvider()
    {
        return array();
    }

    /** testSetValues
     *
     * @param mixed $value the value to set
     *
     * @covers cURL::setValues
     *
     * @dataProvider valuesDataProvider
     *
     * @return void
     */
    public function testSetValues($value)
    {
        $this->expected = true;
        $this->actual = $this->object->setValues($value);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testGetValues
     *
     * @covers cURL::getValues
     *
     * @return void
     */
    public function testGetValues()
    {
        $this->expected = true;
        $this->actual = $this->object->getValues();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testPost
     *
     * @covers cURL::post
     *
     * @return void
     */
    public function testPost()
    {
        $this->expected = true;
        $this->actual = $this->object->post();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testGet
     *
     * @covers cURL::get
     *
     * @return void
     */
    public function testGet()
    {
        $this->expected = true;
        $this->actual = $this->object->get();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testSetOptionsArray
     *
     * @covers cURL::setOptionsArray
     *
     * @return void
     */
    public function testSetOptionsArray()
    {
        $this->expected = true;
        $this->actual = $this->object->setOptionsArray();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testExec
     *
     * @covers cURL::exec
     *
     * @return void
     */
    public function testExec()
    {
        $this->expected = true;
        $this->actual = $this->object->exec();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testError
     *
     * @covers cURL::error
     *
     * @return void
     */
    public function testError()
    {
        $this->expected = true;
        $this->actual = $this->object->error();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testGetResult
     *
     * @covers cURL::getResult
     *
     * @return void
     */
    public function testGetResult()
    {
        $this->expected = array();
        $this->actual = $this->object->getResult();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testSetInfo
     *
     * @covers cURL::setInfo
     *
     * @return void
     */
    public function testSetInfo()
    {
        $this->expected = true;
        $this->actual = $this->object->setInfo();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testGetInfo
     *
     * @covers cURL::getInfo
     *
     * @return void
     */
    public function testGetInfo()
    {
        $this->expected = array();
        $this->actual = $this->object->getInfo();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testClose
     *
     * @covers cURL::close
     *
     * @return void
     */
    public function testClose()
    {
        $this->expected = null;
        $this->actual = $this->object->close();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** keyDataProvider
     *
     * @return array
     */
    public function keyDataProvider()
    {
        return array();
    }

    /** testCheck
     *
     * @param string $key the key of the cURL object
     *
     * @covers cURL::check
     *
     * @dataProvider keyDataProvider
     *
     * @return void
     */
    public function testCheck($key)
    {
        $this->expected = true;
        $this->actual = $this->object->check($key);
        $this->assertEquals($this->expected, $this->actual);
    }
}
