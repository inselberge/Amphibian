<?php

require_once __DIR__ . DIRECTORY_SEPARATOR . ".." . DIRECTORY_SEPARATOR . ".." . DIRECTORY_SEPARATOR . "baseTest.php";
require_once AMPHIBIAN_CORE_NEUTRAL . "Parameter.php";
/**
 * Class parameterTest
 *
 * @category Test
 * @package  Core
 * @author   Carl "Tex" Morgan <texmorgan@amphibian.co>
 * @license  All rights reserved by Inselberge Inc. unless otherwise stated.
 * @link     http://amphibian.co/documentation/parameterTest
 *
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-09-17 at 13:41:29.
 */
class parameterTest 
    extends BaseTest
{

    /** setUp
     *
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        $this->arguments = "1/user/browse/groupBy/create_date/de/modify_date/as/limit/25/offset/25";
        $this->object = Parameter::factory($this->arguments);
    }

    /** testInstance
     *
     * @covers Parameter::instance
     *
     * @return void
     */
    public function testInstance()
    {
        $this->expected = $this->object;
        $this->actual = Parameter::instance($this->arguments);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testFactory
     *
     * @covers Parameter::factory
     *
     * @return void
     */
    public function testFactory()
    {
        $this->expected = $this->object;
        $this->actual = Parameter::factory($this->arguments);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testExecute
     *
     * @covers Parameter::execute
     *
     * @return void
     */
    public function testExecute()
    {
        $this->expected = true;
        $this->actual = $this->object->execute();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** setVariablesDataProvider
     *
     * @return array
     */
    public function setVariablesDataProvider()
    {
        return array(
            array(
                array(
                    "id"=>"587",
                    "first_name"=>"Tex",
                    "last_name"=>"Morgan",
                    "action"=>"get",
                    "branch"=>"Geekdom",
                    "controller"=>"user"
                )
            )
        );
    }

    /** testSetVariables
     *
     * @param array $vars the variables to set
     *
     * @dataProvider setVariablesDataProvider
     *
     * @covers Parameter::setVariables
     *
     * @return void
     */
    public function testSetVariables( array $vars )
    {
        $this->arguments=$vars;
        $this->expected = true;
        $this->actual = $this->object->setVariables($this->arguments);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testGetVariables
     *
     * @covers Parameter::getVariables
     *
     * @return void
     */
    public function testGetVariables()
    {
        $this->expected = $this->setVariablesDataProvider();
        $this->object->setVariables($this->setVariablesDataProvider());
        $this->actual = $this->object->getVariables();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testGetSpecificVariable
     *
     * @param string $key   the index of the variable
     * @param mixed  $value the expected value
     *
     * @covers Parameter::getSpecificVariable
     *
     * @dataProvider specificDataProvider
     *
     * @return void
     */
    public function testGetSpecificVariable($key, $value)
    {
        $this->expected = $value;
        $this->object->execute();
        $this->actual = $this->object->getSpecificVariable($key);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** specificDataProvider
     *
     * @return array
     */
    public function specificDataProvider()
    {
        return array(
          array(
              "groupBy",
              " create_date de modify_date as"
          ),
          array(
              "limit",
              "25 offset 25"
          )
        );
    }

    /** testSetSpecificVariable
     *
     * @param string $key   the index of the variable
     * @param mixed  $value the value to append to the key
     *
     * @dataProvider specificDataProvider
     *
     * @covers Parameter::setSpecificVariable
     *
     * @return void
     */
    public function testSetSpecificVariable($key, $value)
    {
        $this->expected=true;
        $this->actual= $this->object->setSpecificVariable($key, $value);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testAppendSpecificVariable
     *
     * @param string $key   the index of the variable
     * @param mixed  $value the value to append to the key
     *
     * @covers Parameter::appendSpecificVariable
     *
     * @dataProvider specificDataProvider
     *
     * @return void
     */
    public function testAppendSpecificVariable($key, $value)
    {
        $this->object->execute();
        $this->expected = true;
        $this->actual = $this->object->appendSpecificVariable($key, $value);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testGetDataVariables
     *
     * @param array $testArray an array to test
     *
     * @covers Parameter::getDataVariables
     *
     * @dataProvider dataVariablesDataProvider
     *
     * @return void
     */
    public function testGetDataVariables($testArray)
    {
        $this->expected = $testArray;
        $this->object->setVariables($testArray);
        $this->actual = $this->object->getDataVariables();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** dataVariablesDataProvider
     *
     * @return array
     */
    public function dataVariablesDataProvider()
    {
        return array(
            array(
                array(
                    "id" => "587",
                    "first_name" => "Tex",
                    "last_name" => "Morgan"
                )
            )
        );
    }
}
