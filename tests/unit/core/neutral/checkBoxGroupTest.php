<?php

require_once __DIR__ . DIRECTORY_SEPARATOR . ".." . DIRECTORY_SEPARATOR . ".." . DIRECTORY_SEPARATOR . "baseTest.php";
require_once AMPHIBIAN_CORE_NEUTRAL . "checkBoxGroup.php";
/**
 * Class checkBoxGroupTest
 *
 * @category Test
 * @package  CheckBoxGroup
 * @author   Carl 'Tex' Morgan <texmorgan@amphibian.co>
 * @license  All rights reserved by Inselberge Inc. unless otherwise stated.
 * @link     documentation/checkBoxGroupTest
 *
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-09-08 at 17:05:32.
 *
 */
class checkBoxGroupTest 
    extends BaseTest
{
    /** setUp
     *
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        $_actionsList[] = array ("id"=>"Stored Procedures", "value"=>"1");
        $_actionsList[]=array ("id"=>"Database Views", "value"=>"2");
        $_actionsList[]=array ("id"=>"Models", "value"=>"3");
        $_actionsList[]=array ("id"=>"Forms", "value"=>"4");
        $_actionsList[]=array ("id"=>"User Interface", "value"=>"5");
        $_actionsList[]=array ("id"=>"Browse", "value"=>"6");
        $this->object = checkBoxGroup::instance($_actionsList, "checkboxAction");
    }

    /** testInstance
     *
     * @covers checkBoxGroup::instance
     *
     * @todo   Implement testInstance().
     *
     * @return void
     */
    public function testInstance()
    {
        $this->expected = $this->object;
        $_actionsList[] = array ("id"=>"Stored Procedures", "value"=>"1");
        $_actionsList[]=array ("id"=>"Database Views", "value"=>"2");
        $_actionsList[]=array ("id"=>"Models", "value"=>"3");
        $_actionsList[]=array ("id"=>"Forms", "value"=>"4");
        $_actionsList[]=array ("id"=>"User Interface", "value"=>"5");
        $_actionsList[]=array ("id"=>"Browse", "value"=>"6");
        $this->actual = checkBoxGroup::instance($_actionsList, "checkboxAction");
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testSetMultipleBreak
     *
     * @covers checkBoxGroup::setMultipleBreak
     *
     * @return void
     */
    public function testSetMultipleBreak()
    {
        $this->expected = true;
        $this->actual = $this->object->setMultipleBreak(3);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** horizontalOrVerticalDataProvider
     *
     * @return array
     */
    public function horizontalOrVerticalDataProvider()
    {
        return array(
            array(1),
            array(2)
        );
    }

    /** testSetHorizontalOrVertical
     *
     * @param int $direction the direction to use
     *
     * @covers checkBoxGroup::setHorizontalOrVertical
     *
     * @dataProvider horizontalOrVerticalDataProvider
     *
     * @return void
     */
    public function testSetHorizontalOrVertical($direction)
    {
        $this->expected = true;
        $this->actual = $this->object->setHorizontalOrVertical($direction);
        $this->assertEquals($this->expected, $this->actual);

        $this->expected = false;
        $this->actual = $this->object->setHorizontalOrVertical(null);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testSetLegendLabel
     *
     * @covers checkBoxGroup::setLegendLabel
     *
     * @return void
     */
    public function testSetLegendLabel()
    {
        $this->expected = true;
        $this->actual = $this->object->setLegendLabel("All Actions");
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testExecute
     *
     * @covers checkBoxGroup::execute
     *
     * @return void
     */
    public function testExecute()
    {
        $this->expected = null;
        $this->actual = $this->object->execute();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testPrintArray
     *
     * @covers checkBoxGroup::printArray
     *
     * @return void
     */
    public function testPrintArray()
    {
        $this->expected = null;
        $this->actual = $this->object->printArray();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testPrintHTML
     *
     * @covers checkBoxGroup::printHTML
     *
     * @return void
     */
    public function testPrintHTML()
    {
        $this->expected = null;
        $this->actual = $this->object->printHTML();
        $this->assertEquals($this->expected, $this->actual);
    }
}
