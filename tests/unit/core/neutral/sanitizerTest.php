<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-08-23 at 22:51:30.
 */
require_once __DIR__ . DIRECTORY_SEPARATOR . ".." . DIRECTORY_SEPARATOR . ".." . DIRECTORY_SEPARATOR . "baseTest.php";
require_once AMPHIBIAN_CORE_NEUTRAL . "Sanitizer.php";

class sanitizerTest
    extends BaseTest
{
    /** setUp
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        $this->object = sanitizer::instance();
    }

    /** tearDown
     *
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @return void
     */
    protected function tearDown()
    {
    }

    /**
     * @covers sanitizer::instance
     */
    public function testInstance()
    {
        $this->assertEquals($this->object, sanitizer::instance());
    }

    /**
     * @covers sanitizer::getFlags
     */
    public function testGetFlags()
    {
        $this->object->setSanitationFilter(FILTER_SANITIZE_ENCODED);
        $this->object->setFlags(FILTER_FLAG_STRIP_HIGH);
        $this->assertEquals(FILTER_FLAG_STRIP_HIGH,$this->object->getFlags());
        $this->assertNotEquals(FILTER_FLAG_STRIP_LOW,$this->object->getFlags());
    }

    /**
     * @covers sanitizer::setFlags
     */
    public function testSetFlags()
    {
        $this->object->setSanitationFilter(FILTER_SANITIZE_ENCODED);
        $this->assertTrue($this->object->setFlags(FILTER_FLAG_STRIP_HIGH));
        /*todo: uncomment after logTest and ExceptionHandlerTest are done
        try {
            $this->setExpectedException('ExceptionHandler',"sanitizer::setFlags: invalid flag.");
            $this->object->setFlags(5);
        } catch ( ExceptionHandler $e ) {
            $this->assertType('ExceptionHandler',$e);
        }
        */
    }

    /**
     * @covers sanitizer::getVariable
     */
    public function testGetVariable()
    {
        $expected = 15;
        $this->object->setVariable(15);
        $this->assertEquals($expected, $this->object->getVariable());
    }

    /**
     * @covers sanitizer::setVariable
     */
    public function testSetVariable()
    {
        $this->assertTrue($this->object->setVariable(15));
    }

    /**
     * @covers sanitizer::getSanitationFilter
     */
    public function testGetSanitationFilter()
    {
        $this->object->setSanitationFilter(FILTER_SANITIZE_NUMBER_INT);
        $this->assertEquals(FILTER_SANITIZE_NUMBER_INT, $this->object->getSanitationFilter());
    }

    /**
     * @covers sanitizer::setSanitationFilter
     */
    public function testSetSanitationFilter()
    {
        $this->assertTrue($this->object->setSanitationFilter(FILTER_SANITIZE_NUMBER_INT));
    }

    /**
     * @covers sanitizer::execute
     */
    public function testExecute()
    {
        $this->object->setVariable(15);
        $this->object->setSanitationFilter(FILTER_SANITIZE_NUMBER_INT);
        $this->assertEquals(15, $this->object->execute());
    }
}
