<?php
require_once __DIR__ . DIRECTORY_SEPARATOR
    . ".." . DIRECTORY_SEPARATOR
    . ".." . DIRECTORY_SEPARATOR
    . "baseTest.php";
require_once AMPHIBIAN_CORE_NEUTRAL."API.php";
/**
 * Class APITest
 *
 * @category UnitTestNeutral
 * @package  APITest
 * @author   Carl "Tex" Morgan <texmorgan@amphibian.co>
 * @license  GPL v3
 * @link     documentation/APITest
 *
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-04-06 at 23:04:16.
 *
 */
class APITest 
    extends BaseTest
{
    protected $request;
    protected $origin;

    /** setUp
     *
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        $this->request = Request::instance();
        $this->object = "127.0.0.1";
        $this->object = API::instance($this->request, $this->origin);
    }

    /** testInstance
     *
     * @covers API::instance
     *
     * @return void
     */
    public function testInstance()
    {
        $this->expected = $this->object;
        $this->actual = API::instance($this->request, $this->origin);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testSetKey
     *
     * @param string $value          the API key
     * @param bool   $expectedResult true = success; false = failure
     *
     * @covers API::setKey
     *
     * @return void
     */
    public function testSetKey($value, $expectedResult)
    {
        $this->expected = $expectedResult;
        $this->actual = $this->object->setKey($value);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testGetKey
     *
     * @param mixed $expectedResult the expected value of the key
     *
     * @covers API::getKey
     *
     * @return void
     */
    public function testGetKey($expectedResult)
    {
        $this->expected = $expectedResult;
        $this->actual = $this->object->getKey();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testExecute
     *
     * @param mixed $expectedResult the expected value after execute runs
     *
     * @covers API::execute
     *
     * @return void
     */
    public function testExecute($expectedResult)
    {
        $this->expected = $expectedResult;
        $this->actual = $this->object->execute();
        $this->assertEquals($this->expected, $this->actual);
    }
}
