<?php
/**
 *
 * Created by JetBrains PhpStorm.
 * User: Carl "Tex" Morgan
 * Date: 10/14/13
 * Time: 11:46 AM
 *
 * All rights reserved by Inselberge Inc. unless otherwise stated.
 */
require_once __DIR__ . DIRECTORY_SEPARATOR . ".." . DIRECTORY_SEPARATOR . ".." . DIRECTORY_SEPARATOR . "baseTest.php";
require_once AMPHIBIAN_CORE_NEUTRAL."Git.php";
/**
 * Class GitTest
 *
 * @category Test
 * @package  Git
 * @author   Carl "Tex" Morgan <texmorgan@amphibian.co>
 * @license  All rights reserved by Inselberge Inc. unless otherwise stated.
 * @link     http://amphibian.co/documentation/GitTest
 *
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-09-08 at 17:05:30.
 *
 */
class GitTest 
    extends BaseTest
{
    /** setUp
     *
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        $this->object = Git::instance();
    }


    /** testInstance
     *
     * @covers Git::instance
     *
     * @return void
     */
    public function testInstance()
    {
        $this->expected = $this->object;
        $this->actual = Git::instance();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testCheckoutBranch
     *
     * @covers Git::checkoutBranch
     *
     * @return void
     */
    public function testCheckoutBranch()
    {
        $this->expected = true;
        $this->actual = $this->object->checkoutBranch();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testAdd
     *
     * @covers Git::add
     *
     * @return void
     */
    public function testAdd()
    {
        $this->expected = true;
        $this->actual = $this->object->add();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testMv
     *
     * @covers Git::move
     *
     * @return void
     */
    public function testMove()
    {
        $this->expected = true;
        $this->actual = $this->object->move("XMLTest.php", "XMLTest2.php");
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testRm
     *
     * @covers Git::remove
     *
     * @return void
     */
    public function testRemove()
    {
        $this->expected = true;
        $this->arguments = array("XMLTest.php","XMLTest2.php");
        $this->actual = $this->object->remove($this->arguments);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testCommit
     *
     * @covers Git::commit
     *
     * @return void
     */
    public function testCommit()
    {
        $this->expected = true;
        $this->arguments = "Testing a commit";
        $this->actual = $this->object->commit($this->arguments);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testTag
     *
     * @covers Git::tag
     *
     * @return void
     */
    public function testTag()
    {
        $this->expected = true;
        $this->arguments = date("Y-m-d_Hi");
        $this->actual = $this->object->tag($this->arguments);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testChangeBranchToMaster
     *
     * @covers Git::changeBranchToMaster
     *
     * @return void
     */
    public function testChangeBranchToMaster()
    {
        $this->expected = true;
        $this->actual = $this->object->changeBranchToMaster();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testMergeBranchWithMaster
     *
     * @covers Git::mergeBranchWithMaster
     *
     * @return void
     */
    public function testMergeBranchWithMaster()
    {
        $this->expected = true;
        $this->actual = $this->object->mergeBranchWithMaster();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testDeleteBranch
     *
     * @covers Git::deleteBranch
     *
     * @return void
     */
    public function testDeleteBranch()
    {
        $this->expected = true;
        $this->actual = $this->object->deleteBranch();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testPush
     *
     * @covers Git::push
     *
     * @return void
     */
    public function testPush()
    {
        /*
        $this->expected = true;
        $this->actual = $this->object->push();
        $this->assertEquals($this->expected, $this->actual);
        */
    }

    /** testPull
     *
     * @covers Git::pull
     *
     * @return void
     */
    public function testPull()
    {
        /*
        $this->expected = true;
        $this->actual = $this->object->pull();
        $this->assertEquals($this->expected, $this->actual);
        */
    }

    /** testCloneRepository
     *
     * @covers Git::cloneRepository
     *
     * @todo   Implement testCloneRepository().
     *
     * @return void
     */
    public function testCloneRepository()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /** testRemote
     *
     * @covers Git::remote
     *
     * @todo   Implement testRemote().
     *
     * @return void
     */
    public function testRemote()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /** testPrintOutput
     *
     * @covers Git::printOutput
     *
     * @return void
     */
    public function testPrintOutput()
    {
        $this->expected = null;
        $this->actual = $this->object->printOutput();
        $this->assertEquals($this->expected, $this->actual);

    }
}
