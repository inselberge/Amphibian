<?php
require_once __DIR__ . DIRECTORY_SEPARATOR . ".." . DIRECTORY_SEPARATOR . ".." . DIRECTORY_SEPARATOR . ".." . DIRECTORY_SEPARATOR . "config" . DIRECTORY_SEPARATOR . "config.inc.php";
require_once AMPHIBIAN_TESTS . "baseTest.php";
require_once AMPHIBIAN_CORE_NEUTRAL . "UserLevelCheck.php";
/**
 * Class userLevelCheckTest
 *
 * @category Test
 * @package  Core
 * @author   Carl "Tex" Morgan <texmorgan@amphibian.co>
 * @license  All rights reserved by Inselberge Inc. unless otherwise stated.
 * @link     http://amphibian.co/documentation/userLevelCheckTest
 *
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-10-07 at 16:01:33.
 *
 */
class UserLevelCheckTest 
    extends BaseTest
{

    /** setUp
     *
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        $this->object = new userLevelCheck();
    }

    /** tearDown
     *
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @return void
     */
    protected function tearDown()
    {
    }

    /** goodDataProvider
     * 
     * @return void
     */
    public function goodDataProvider()
    {

    }

    /** badDataProvider
     * 
     * @return void
     */
    public function badDataProvider()
    {

    }

    /** testSetPermitAll
     *
     * @param array $permitAll an array of roles allowed all access
     *
     * @return void
     */
    public function testSetPermitAll( $permitAll )
    {
        $this->expected = true;
        $this->actual = $this->object->setPermitAll($permitAll);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testSetPermitCreate
     *
     * @param array $permitCreate an array of roles allowed to execute
     *
     * @return void
     */
    public function testSetPermitCreate( $permitCreate )
    {
        $this->expected = true;
        $this->actual = $this->object->setPermitCreate($permitCreate);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testSetPermitNone
     *
     * @param array $permitNone an array of roles not allowed any access
     *
     * @return void
     */
    public function testSetPermitNone( $permitNone )
    {
        $this->expected = true;
        $this->actual = $this->object->setPermitNone($permitNone);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testSetPermitRead
     *
     * @param array $permitRead an array of roles allowed to read
     *
     * @return void
     */
    public function testSetPermitRead( $permitRead )
    {
        $this->expected = true;
        $this->actual = $this->object->setPermitRead($permitRead);
        $this->assertEquals($this->expected, $this->actual);
    }
    /** testSetPermitUpdate
     *
     * @param array $permitUpdate an array of roles allowed to update
     *
     * @return void
     */
    public function testSetPermitUpdate( $permitUpdate )
    {
        $this->expected = true;
        $this->actual = $this->object->setPermitUpdate($permitUpdate);
        $this->assertEquals($this->expected, $this->actual);
    }
    /** testSetUserType
     *
     * @param array $userType the current user's various roles
     *
     * @return void
     */
    public function testSetUserType( $userType )
    {
        $this->expected = true;
        $this->actual = $this->object->setUserType($userType);
        $this->assertEquals($this->expected, $this->actual);
    }
    /** testExecute
     *
     * @return void
     */
    public function testExecute()
    {
        $this->expected = true;
        $this->actual = $this->object->execute();
        $this->assertEquals($this->expected, $this->actual);
    }
    /** testGetResponse
     *
     * @return void
     */
    public function testGetResponse()
    {
        $this->expected = array();
        $this->actual = $this->object->getResponse();
        $this->assertEquals($this->expected, $this->actual);
    }
    /** testGetSpecificResponse
     *
     * @param string $key the specific key to get
     *
     * @return void
     */
    public function testGetSpecificResponse($key)
    {
        $this->expected = array();
        $this->actual = $this->object->getSpecificResponse($key);
        $this->assertEquals($this->expected, $this->actual);
    }
}