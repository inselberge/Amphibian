<?php

require_once __DIR__ . DIRECTORY_SEPARATOR . ".." . DIRECTORY_SEPARATOR . ".." . DIRECTORY_SEPARATOR . "baseTest.php";
require_once AMPHIBIAN_CORE_NEUTRAL . "Validator.php";
/**
 * Class ValidatorTest
 *
 * @category Test
 * @package  Core
 * @author   Carl 'Tex' Morgan <texmorgan@amphibian.co>
 * @license  All rights reserved by Inselberge Inc. unless otherwise stated.
 * @link     http://amphibian.co/documentation/validatorTest
 *
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-09-08 at 17:05:30.
 *
 */
class ValidatorTest
    extends BaseTest
{

    /** setUp
     *
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        $this->object = Validator::instance();
    }

    /** tearDown
     *
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @return void
     */
    protected function tearDown()
    {
    }

    /** testInstance
     *
     * @covers validator::instance
     *
     * @return void
     */
    public function testInstance()
    {
        $this->expected = $this->object;
        $this->actual = validator::instance();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testSetArgumentArray
     *
     * @covers validator::setArgumentArray
     *
     * @return void
     */
    public function testSetArgumentArray()
    {
        $arg = array(
            "x"=>array(
                'filter'=>FILTER_VALIDATE_INT,
                'options'=>array('min_range'=>5,'max_range'=>15)
            ),
            "y"=>array(
                'filter'=>FILTER_VALIDATE_INT,
                'options'=>array('min_range'=>0,'max_range'=>25)
            )
        );
        $this->assertTrue($this->object->setArgumentArray($arg));
    }

    /** testGetSpecificValidator
     *
     * @covers validator::getSpecificValidator
     *
     * @return void
     */
    public function testGetSpecificValidator()
    {
        $arg = array(
            "x"=>array(
                'filter'=>FILTER_VALIDATE_INT,
                'options'=>array('min_range'=>5,'max_range'=>15)
            ),
            "y"=>array(
                'filter'=>FILTER_VALIDATE_INT,
                'options'=>array('min_range'=>0,'max_range'=>25)
            )
        );
        $this->object->setArgumentArray($arg);
        $this->assertEquals(FILTER_VALIDATE_INT, $this->object->getSpecificValidator("x"));
    }

    /** testSetSpecificValidator
     *
     * @covers validator::setSpecificValidator
     *
     * @return void
     */
    public function testSetSpecificValidator()
    {
        $this->assertTrue($this->object->setSpecificValidator("x", FILTER_VALIDATE_INT));
    }

    /** testSetSpecificFlags
     *
     * @covers validator::setSpecificFlags
     *
     *
     * @return void
     */
    public function testSetSpecificFlags()
    {
        $this->object->setSpecificValidator("x", FILTER_VALIDATE_INT);
        $this->assertTrue($this->object->setSpecificFlags("x", FILTER_FLAG_ALLOW_HEX));
    }

    /** testSetSpecificOptions
     *
     * @covers validator::setSpecificOptions
     *
     * @return void
     */
    public function testSetSpecificOptions()
    {
        $this->object->setSpecificValidator("x",FILTER_VALIDATE_INT);
        $this->assertTrue($this->object->setSpecificOptions("x", "min_range", 59));
    }

    /** testGetArgumentArray
     *
     * @covers validator::getArgumentArray
     *
     * @return void
     */
    public function testGetArgumentArray()
    {
        $arg = array(
            "x"=>array(
                'filter'=>FILTER_VALIDATE_INT,
                'options'=>array('min_range'=>5,'max_range'=>15)
            ),
            "y"=>array(
                'filter'=>FILTER_VALIDATE_INT,
                'options'=>array('min_range'=>0,'max_range'=>25)
            )
        );
        $this->object->setArgumentArray($arg);
        $this->assertEquals($arg, $this->object->getArgumentArray());
    }

    /** testSetDataArray
     *
     * @covers validator::setDataArray
     *
     * @return void
     */
    public function testSetDataArray()
    {
        $data = array("x"=>10,"y"=>15);
        $this->assertTrue($this->object->setDataArray($data));
    }

    /** testSetSpecificDataArray
     *
     * @covers validator::setSpecificDataArray
     *
     * @return void
     */
    public function testSetSpecificDataArray()
    {
        $this->assertTrue($this->object->setSpecificDataArray("z", 42));
    }

    /** testGetDataArray
     *
     * @covers validator::getDataArray
     *
     * @return void
     */
    public function testGetDataArray()
    {
        $data = array("x"=>10,"y"=>15);
        $this->object->setDataArray($data);
        $this->assertEquals($data, $this->object->getDataArray());
    }

    /** testExecute
     *
     * @covers validator::execute
     *
     * @return void
     */
    public function testExecute()
    {
        $data = array("x"=>10,"y"=>15);
        $this->object->setDataArray($data);
        $arg = array(
            "x"=>array(
                'filter'=>FILTER_VALIDATE_INT,
                'options'=>array('min_range'=>5,'max_range'=>15)
            ),
            "y"=>array(
                'filter'=>FILTER_VALIDATE_INT,
                'options'=>array('min_range'=>0,'max_range'=>25)
            )
        );
        $this->object->setArgumentArray($arg);
        $this->assertTrue($this->object->execute());
    }

    /** testGetResultArray
     *
     * @covers validator::getResultArray
     *
     * @return void
     */
    public function testGetResultArray()
    {
        $expected = array("x"=>10,"y"=>15);
        $data = array("x"=>10,"y"=>15);
        $this->object->setDataArray($data);
        $arg = array(
            "x"=>array(
                'filter'=>FILTER_VALIDATE_INT,
                'options'=>array('min_range'=>5,'max_range'=>15)
            ),
            "y"=>array(
                'filter'=>FILTER_VALIDATE_INT,
                'options'=>array('min_range'=>0,'max_range'=>25)
            )
        );
        $this->object->setArgumentArray($arg);
        $this->object->execute();
        $this->assertEquals($expected, $this->object->getResultArray());
    }

    /** testGetSpecificResult
     *
     * @covers validator::getSpecificResult
     *
     * @return void
     */
    public function testGetSpecificResult()
    {
        $expected = 10;
        $data = array("x"=>10);
        $this->object->setDataArray($data);
        $arg = array(
            "x"=>array(
                'filter'=>FILTER_VALIDATE_INT,
                'options'=>array('min_range'=>5,'max_range'=>15)
            )
        );
        $this->object->setArgumentArray($arg);
        $this->object->execute();
        $this->assertEquals($expected, $this->object->getSpecificResult("x"));
    }
}
