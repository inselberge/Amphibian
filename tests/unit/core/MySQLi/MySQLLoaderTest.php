<?php
require_once __DIR__ . DIRECTORY_SEPARATOR . ".." . DIRECTORY_SEPARATOR . ".." . DIRECTORY_SEPARATOR . "baseTest.php";
require_once AMPHIBIAN_CORE."MySQLLoader.php";
/**
 * Class MySQLLoaderTest
 *
 * @category 
 * @package  
 * @author   
 * @license  
 * @link     documentation/MySQLLoaderTest
 *
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-04-06 at 23:01:18.
 *
 */
class MySQLLoaderTest 
    extends BaseTest
{

    /** setUp
     *
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        $this->object = new MySQLLoader();
    }

    /** testSetFileName
     *
     * @param string $fileName       the file name to use
     * @param bool   $expectedResult true = success; false = failure
     *
     * @covers MySQLLoader::setFileName
     *
     * @dataProvider fileNameDataProvider
     *
     * @return void
     */
    public function testSetFileName($fileName, $expectedResult)
    {
        $this->expected = $expectedResult;
        $this->actual = $this->object->setFileName($fileName);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** fileNameDataProvider
     *
     * @return array
     */
    public function fileNameDataProvider()
    {
        return array(
            array(),
            array(),
            array()
        );
    }

    /** testSetDirectory
     *
     * @param string $directory      the directory to use
     * @param bool   $expectedResult true = success; false = failure
     *
     * @covers MySQLLoader::setDirectory
     *
     * @dataProvider directoryDataProvider
     *
     * @return void
     */
    public function testSetDirectory($directory, $expectedResult)
    {
        $this->expected = $expectedResult;
        $this->actual = $this->object->setDirectory($directory);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testExecute
     *
     * @covers MySQLLoader::execute
     *
     * @return void
     */
    public function testExecute()
    {
        $this->expected = true;
        $this->actual = $this->object->execute();
        $this->assertEquals($this->expected, $this->actual);
    }
}
