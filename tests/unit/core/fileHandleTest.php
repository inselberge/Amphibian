<?php

require_once __DIR__ . DIRECTORY_SEPARATOR."..".DIRECTORY_SEPARATOR."..".DIRECTORY_SEPARATOR."..".DIRECTORY_SEPARATOR."config/config.inc.php";
require_once __DIR__ . DIRECTORY_SEPARATOR."..".DIRECTORY_SEPARATOR."baseTest.php";
require_once AMPHIBIAN_CORE."FileHandle.php";
/**
 * Class FileHandleTest
 *
 * @category Test
 * @package  FileHandle
 * @author   Carl "Tex" Morgan <texmorgan@amphibian.co>
 * @license  All rights reserved by Inselberge Inc. unless otherwise stated.
 * @link     documentation/FileHandleTest
 *
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-09-08 at 17:05:31.
 *
 */
class FileHandleTest
	extends BaseTest
{
    /** setUp
     *
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        $this->object = new FileHandle("test.txt");
    }

    /** testInstance
     *
     * @covers FileHandle::instance
     *
     * @return void
     */
    public function testInstance()
    {
        $this->expected = $this->object;
        $this->actual = FileHandle::instance("test.txt");
        $this->assertEquals($this->expected, $this->actual);
    }

    /** openOptionDataProvider
     *
     * @return array
     */
    public function openOptionDataProvider()
    {
        return array(
            array("w"),
            array("r"),
            array("r+w"),
            array("a"),
            array("x"),
            array("rb"),
            array("cb")
        );
    }

    /** testSetOpenOption
     *
     * @param string $option the file open option
     *
     * @covers FileHandle::setOpenOption
     *
     * @dataProvider openOptionDataProvider
     *
     * @return void
     */
    public function testSetOpenOption($option)
    {
        $this->expected = true;
        $this->actual = $this->object->setOpenOption($option);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** writeDataProvider
     *
     * @return array
     */
    public function writeDataProvider()
    {
        return array(
            array('Bitte'),
            array("Hello"),
            array(5)
        );
    }

    /** testWrite
     *
     * @param string $data the data to write to the file
     *
     * @covers FileHandle::write
     *
     * @dataProvider writeDataProvider
     *
     * @return void
     */
    public function testWrite($data)
    {
        $this->expected = true;
        $this->actual = $this->object->write($data);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testWriteFull
     *
     * @param string $data the data to write to the file
     *
     * @covers FileHandle::writeFull
     *
     * @dataProvider writeDataProvider
     *
     * @return void
     */
    public function testWriteFull($data)
    {
        $this->expected = true;
        $this->actual = $this->object->writeFull($data);
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testRead
     *
     * @covers FileHandle::read
     *
     * @return void
     */
    public function testRead()
    {
        $this->expected = true;
        $this->actual = $this->object->read();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testReadClean
     *
     * @covers FileHandle::readClean
     *
     * @return void
     */
    public function testReadClean()
    {
        $this->expected = true;
        $this->actual = $this->object->readClean();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testReadFull
     *
     * @covers FileHandle::readFull
     *
     * @return void
     */
    public function testReadFull()
    {
        $this->expected = true;
        $this->actual = $this->object->readFull();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testOpen
     *
     * @covers FileHandle::open
     *
     * @return void
     */
    public function testOpen()
    {
        $this->expected = true;
        $this->actual = $this->object->open();
        $this->assertEquals($this->expected, $this->actual);
    }

    /** testClose
     *
     * @covers FileHandle::close
     *
     * @return void
     */
    public function testClose()
    {
        $this->expected = true;
        $this->actual = $this->object->close();
        $this->assertEquals($this->expected, $this->actual);
    }
}
