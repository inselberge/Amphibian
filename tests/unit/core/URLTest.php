<?php

require_once __DIR__ . DIRECTORY_SEPARATOR."..".DIRECTORY_SEPARATOR."../../config/config.inc.php";
require_once __DIR__ . DIRECTORY_SEPARATOR."..".DIRECTORY_SEPARATOR."baseTest.php";
require_once AMPHIBIAN_CORE."URL.php";
/**
 * Class URLTest
 *
 * @category Test
 * @package  Core
 * @author   Carl "Tex" Morgan <texmorgan@amphibian.co>
 * @license  All rights reserved by Inselberge Inc. unless otherwise stated.
 * @link     http://amphibian.co/documentation/URLTest
 *
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-09-08 at 17:05:30.
 *
 */
class URLTest 
	extends BaseTest
{
    /** setUp
     *
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        $this->object = URL::instance('http://localhost/Phatness/Week1%20Introduction/phpinfo.php');
    }

    /** tearDown
     *
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @return void
     */
    protected function tearDown()
    {
        unset($this->object);
    }

    /** testInstance
     *
     * @covers URL::instance
     *
     * @return void
     */
    public function testInstance()
    {
        $this->assertEquals($this->object, URL::instance('http://localhost/Phatness/Week1%20Introduction/phpinfo.php'));
    }

    /** testSetUrlString
     *
     * @covers URL::setUrlString
     *
     * @return void
     */
    public function testSetUrlString()
    {
        $this->assertTrue($this->object->setUrlString('http://localhost/Phatness/Week1%20Introduction/phpinfo.php'));
    }

    /** testExecute
     *
     * @covers URL::execute
     *
     * @return void
     */
    public function testExecute()
    {
        $this->assertTrue($this->object->execute());
    }

    /** testExplodeURLFull
     *
     * @covers URL::explodeURLFull
     *
     * @return void
     */
    public function testExplodeURLFull()
    {
        $this->assertTrue($this->object->explodeURLFull());
    }

    /** testGetFragment
     *
     * @covers URL::getFragment
     *
     * @return void
     */
    public function testGetFragment()
    {
        $this->object->explodeURLFull();
        $this->assertEquals(null,$this->object->getFragment());
    }

    /** testGetHost
     *
     * @covers URL::getHost
     *
     * @return void
     */
    public function testGetHost()
    {
        $this->object->explodeURLFull();
        $this->assertEquals('localhost',$this->object->getHost());
    }

    /** testGetPass
     *
     * @covers URL::getPass
     *
     * @return void
     */
    public function testGetPass()
    {
        $this->object->explodeURLFull();
        $this->assertEquals(null,$this->object->getPass());
    }

    /** testGetPath
     *
     * @covers URL::getPath
     *
     * @return void
     */
    public function testGetPath()
    {
        $this->object->explodeURLFull();
        $this->assertEquals('Phatness/Week1%20Introduction/phpinfo.php',$this->object->getPath());
    }

    /** testGetPort
     *
     * @covers URL::getPort
     *
     * @return void
     */
    public function testGetPort()
    {
        $this->object->explodeURLFull();
        $this->assertEquals(null,$this->object->getPort());
    }

    /** testGetQuery
     *
     * @covers URL::getQuery
     *
     * @return void
     */
    public function testGetQuery()
    {
        $this->object->explodeURLFull();
        $this->assertEquals(null,$this->object->getQuery());
    }

    /** testGetSchemeFromProtocol
     *
     * @covers URL::getSchemeFromProtocol
     *
     * @return void
     */
    public function testGetSchemeFromProtocol()
    {
        $this->object->explodeURLFull();
        $this->assertEquals('http',$this->object->getSchemeFromProtocol());
    }

    /** testGetScheme
     *
     * @covers URL::getScheme
     *
     * @return void
     */
    public function testGetScheme()
    {
        $this->object->explodeURLFull();
        $this->assertEquals('http',$this->object->getSchemeFromProtocol());
    }

    /** testGetUser
     *
     * @covers URL::getUser
     *
     * @return void
     */
    public function testGetUser()
    {
        $this->object->explodeURLFull();
        $this->assertEquals(null,$this->object->getUser());
    }

    /** testSetRawURL
     *
     * @covers URL::setRawURL
     *
     * @return void
     */
    public function testSetRawURL()
    {
        $this->assertTrue($this->object->setRawURL('http://localhost/Phatness/Week1%20Introduction/phpinfo.php'));
    }

    /** testGetRawURL
     *
     * @covers URL::getRawURL
     *
     * @return void
     */
    public function testGetRawURL()
    {
        $expected = 'http://localhost/Phatness/Week1%20Introduction/phpinfo.php';
        $this->assertEquals($expected, $this->object->getRawURL());
    }

    /** testRawEncode
     *
     * @covers URL::rawEncode
     *
     * @return void
     */
    public function testRawEncode()
    {
        $this->assertTrue($this->object->rawEncode());
    }

    /** testRawDecode
     *
     * @covers URL::rawDecode
     *
     * @return void
     */
    public function testRawDecode()
    {
        $this->assertTrue($this->object->rawDecode());
    }

    /** testEncode
     *
     * @covers URL::encode
     *
     * @return void
     */
    public function testEncode()
    {
        $this->assertTrue($this->object->encode());
    }

    /** testDecode
     *
     * @covers URL::decode
     *
     * @return void
     */
    public function testDecode()
    {
        $this->assertTrue($this->object->decode());
    }

    /** testSetHeaders
     *
     * @covers URL::setHeaders
     *
     * @return void
     */
    public function testSetHeaders()
    {
        $test = array("Accept-Ranges" => "bytes");
        $this->object->explodeURLFull();
        $this->assertTrue($this->object->setHeaders($test));
    }

    /** testGetHeaders
     *
     * @covers URL::getHeaders
     *
     * @return void
     */
    public function testGetHeaders()
    {
        $expected=array("Accept-Ranges" => "bytes");
        $this->object->explodeURLFull();
        $this->assertEquals($expected,$this->object->getHeaders());
    }

    /** testExtractHeaders
     *
     * @covers URL::extractHeaders
     *
     * @return void
     */
    public function testExtractHeaders()
    {
        $this->object->explodeURLFull();
        $this->assertTrue($this->object->extractHeaders());
    }

    /** testSetMetaTags
     *
     * @covers URL::setMetaTags
     *
     * @return void
     */
    public function testSetMetaTags()
    {
        $expected = array("robots"=>"NOINDEX,NOFOLLOW,NOARCHIVE","author"=>"Tex Morgan");
        $this->assertTrue($this->object->setMetaTags($expected));

    }

    /** testGetMetaTags
     *
     * @covers URL::getMetaTags
     *
     * @return void
     */
    public function testGetMetaTags()
    {
        $expected = array("robots"=>"NOINDEX,NOFOLLOW,NOARCHIVE","author"=>"Tex Morgan");
        $this->object->explodeURLFull();
        $this->assertEquals($expected, $this->object->getMetaTags());
    }

    /** testExtractMetaTags
     *
     * @covers URL::extractMetaTags
     *
     * @return void
     */
    public function testExtractMetaTags()
    {
        $this->object->explodeURLFull();
        $this->assertTrue($this->object->extractMetaTags());
    }
}
