<?xml version="1.0" encoding="UTF-8"?>
<project name="Amphibian" default="build">


    <target name="build" depends="prepare,lint,phploc,pdepend,phpmd-ci,phpcs-ci,phpcpd,phpdox,phpunit" />
    <target name="build-parallel" depends="prepare,lint,tools-parallel,phpunit"/>
    <target name="tools-parallel" description="Run tools in parallel">
        <parallel threadCount="2">
            <sequential>
                <antcall target="pdepend"/>
                <antcall target="phpmd-ci"/>
            </sequential>
            <antcall target="phpcpd"/>
            <antcall target="phpcs-ci"/>
            <antcall target="phploc"/>
            <antcall target="phpdox"/>
        </parallel>
    </target>

    <target name="clean">
        <delete dir="${basedir}/build/api"/>
        <delete dir="${basedir}/build/code-browser"/>
        <delete dir="${basedir}/build/coverage"/>
        <delete dir="${basedir}/build/logs"/>
        <delete dir="${basedir}/build/pdepend"/>
        <delete dir="${basedir}/bin"/>
        <delete dir="${basedir}/components"/>
        <delete dir="${basedir}/vendor"/>
        <delete file="${basedir}/composer.lock"/>
    </target>

    <target name="prepare" depends="clean" description="Prepare for build">
        <mkdir dir="${basedir}/build/api"/>
        <mkdir dir="${basedir}/build/code-browser"/>
        <mkdir dir="${basedir}/build/coverage"/>
        <mkdir dir="${basedir}/build/logs"/>
        <mkdir dir="${basedir}/build/pdepend"/>
        <mkdir dir="${basedir}/build/phpdox"/>
    </target>

    <target name="composer" description="Install dependencies with Composer">
        <get src="https://getcomposer.org/composer.phar" dest="${basedir}/composer.phar" skipexisting="true"/>

        <exec executable="php">
            <arg value="composer.phar"/>
            <arg value="install"/>
            <arg value="--prefer-source"/>
            <arg value="-o"/>
            <arg value="-n"/>
        </exec>
    </target>



    <target name="lint" depends="composer" description="Perform syntax check of sourcecode files">
        <apply executable="php" failonerror="off">
            <arg value="-l" />

            <fileset dir="${basedir}/config">
                <include name="**/*.php"/>

            </fileset>

            <fileset dir="${basedir}/core">
                <include name="**/*.php" />

            </fileset>

            <fileset dir="${basedir}/generators">
                <include name="**/*.php" />

            </fileset>

            <fileset dir="${basedir}/spec">
                <include name="**/*.php" />

            </fileset>

            <fileset dir="${basedir}/tests">
                <include name="**/*.php" />

            </fileset>
        </apply>
    </target>

    <target name="phploc" description="Measure project size using PHPLOC">
        <exec executable="phploc">
            <arg value="--count-tests" />
            <arg value="--log-csv" />
            <arg value="${basedir}/build/logs/phploc.csv" />
            <arg path="${basedir}/core" />
            <arg path="${basedir}/generators" />
        </exec>
    </target>

    <target name="pdepend" description="Calculate software metrics using PHP_Depend">
        <exec executable="pdepend">
            <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
            <arg path="${basedir}/core" />
            <arg path="${basedir}/generators" />
        </exec>
    </target>

    <target name="phpmd"
            description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="phpmd">
            <arg path="${basedir}/core" />
            <arg path="${basedir}/generators" />
            <arg value="text" />
            <arg value="${basedir}/build/phpmd.xml" />
        </exec>
    </target>

    <target name="phpmd-ci" description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
        <exec executable="phpmd">
            <arg path="${basedir}/core" />
            <arg path="${basedir}/generators" />
            <arg value="xml" />
            <arg value="${basedir}/build/phpmd.xml" />
            <arg value="--reportfile" />
            <arg value="${basedir}/build/logs/pmd.xml" />
        </exec>
    </target>

    <target name="phpcs"
            description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="phpcs">
            <arg value="--standard=${basedir}/build/phpcs.xml" />
            <arg path="${basedir}/core" />
            <arg path="${basedir}/generators" />
        </exec>
    </target>

    <target name="phpcs-ci" description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
        <exec executable="phpcs" output="/dev/null">
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
            <arg value="--standard=${basedir}/build/phpcs.xml" />
            <arg path="${basedir}/core" />
            <arg path="${basedir}/generators" />
        </exec>
    </target>

    <target name="phpcpd" description="Find duplicate code using PHPCPD">
        <exec executable="phpcpd">
            <arg value="--log-pmd" />
            <arg value="${basedir}/build/logs/pmd-cpd.xml" />
            <arg path="${basedir}/core" />
            <arg path="${basedir}/generators" />
        </exec>
    </target>

    <target name="phpdox" description="Generate API documentation using phpDox">
        <exec executable="phpdox"/>
    </target>

    <!-- Default target -->

    <target name="php-documentor">
        <exec executable="phpdoc" dir="${basedir}/gameplay">
            <arg line="-ct type -t ${basedir}/build/api -ti 'Amphibian' -ue on -s -d ./ "/>
        </exec>
    </target>

    <target name="phpunit">
        <exec executable="phpunit" dir="${basedir}/tests" failonerror="off">
            <arg line="--log-xml ${basedir}/build/logs/phpunit.xml
                 --log-pmd ${basedir}/build/logs/phpunit.pmd.xml
                 --log-metrics ${basedir}/build/logs/metrics.xml
                 --coverage-xml  ${basedir}/build/logs/coverage.xml
                 --coverage-html ${basedir}/build/coverage
                 --coverage-clover ${basedir}/build/coverage/clover.xml
                 --configuration ${basedir}/tests/config/phpunit-unit.xml
                " />
        </exec>
    </target>
</project>
